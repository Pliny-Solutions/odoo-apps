


                        def action_generate_appraisals(self):
        appraisal_model = self.env['hr.appraisal']
        for plan in self:
            for alloc in plan.allocation_ids:
                employee = alloc.employee_id
                if not employee:
                    continue

                existing = appraisal_model.search([
                    ('employee_id', '=', employee.id),
                    ('plan_id', '=', plan.id)
                ])
                if existing:
                    continue

                appraisal_model.create({
                    'employee_id': employee.id,
                    'manager_id': employee.parent_id.id if employee.parent_id else False,
                    'job_id': employee.job_id.id if employee.job_id else False,
                    'plan_id': plan.id,
                    'category_id': plan.category_id.id,
                    'start_date': plan.start_date,
                    'end_date': plan.end_date,
                    'deadline': plan.deadline,
                })



                    @api.onchange('name')
    def _onchange_name(self):
        if self.name:
            self.start_date = fields.Date.today()

    import logging
		_logger = logging.getLogger(__name__)


    def action_generate_appraisals(self):
        """Creates appraisal records from plan and allocation data."""
        Appraisal = self.env['hr.appraisal']
        created = 0

        for plan in self:
            for alloc in plan.allocation_ids:
                employee = alloc.employee_id
                if not employee:
                    continue

                # Avoid duplicates
                exists = Appraisal.search([
                    ('employee_id', '=', employee.id),
                    ('plan_id', '=', plan.id)
                ], limit=1)
                if exists:
                    continue

                Appraisal.create({
                    'employee_id': employee.id,
                    'plan_id': plan.id,
                    'start_date': plan.start_date,
                    'end_date': plan.end_date,
                    'deadline': plan.deadline,
                    'category_id': plan.category_id.id,
                    'manager_id': employee.parent_id.id if employee.parent_id else False,
                    'job_id': employee.job_id.id if employee.job_id else False,
                    'state': 'draft',
                })
                created += 1

        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': "Appraisals Generated",
                'message': f"{created} new appraisal(s) created.",
                'type': 'success',
            }
        }
